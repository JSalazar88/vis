<style type="text/css">body, html {
        font-family: arial, sans-serif;
        font-size: 11pt;
      }

      .vis-item.vis-background.am {
        background: linear-gradient(to right, rgba(90,103,144,1) , rgba(241,192,44,1));
      }
      .vis-item.vis-background.pm {
        background: linear-gradient(to right, rgba(241,192,44,1) , rgba(90,103,144,1));
      }
      .vis-item.vis-background.am2 {
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsLeft.png"),
            radial-gradient(circle at right,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -webkit-linear-gradient(90deg, rgba(1,41,63,0.90) 10%, rgba(1,41,63,0.80) 25%, rgba(166, 230, 255, 0.95) 80%); /* Chrome 10+, Saf5.1+ */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsLeft.png"),
            radial-gradient(circle at right,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -moz-linear-gradient(90deg, rgba(1,41,63,0.90) 10%, rgba(1,41,63,0.80) 25%, rgba(166, 230, 255, 0.95) 80%); /* FF3.6+ */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsLeft.png"),
            radial-gradient(circle at right,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -ms-linear-gradient(90deg, rgba(1,41,63,0.90) 10%, rgba(1,41,63,0.80) 25%, rgba(166, 230, 255, 0.95) 80%); /* IE10 */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsLeft.png"),
            radial-gradient(circle at right,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -o-linear-gradient(90deg, rgba(1,41,63,0.90) 10%, rgba(1,41,63,0.80) 25%, rgba(166, 230, 255, 0.95) 80%); /* Opera 11.10+ */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsLeft.png"),
            radial-gradient(circle at right,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            linear-gradient(90deg, rgba(1,41,63,0.90) 10%, rgba(1,41,63,0.80) 25%, rgba(166, 230, 255, 0.95) 80%); /* W3C */
        background-size: 100% 100%;
      }
      .vis-item.vis-background.pm2 {
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsRight.png"),
            radial-gradient(circle at left,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -webkit-linear-gradient(90deg, rgba(166, 230, 255, 0.95) 10%, rgba(1,41,63,0.80) 75%, rgba(1,41,63,0.90) 90%); /* Chrome 10+, Saf5.1+ */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsRight.png"),
            radial-gradient(circle at left,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -moz-linear-gradient(90deg, rgba(166, 230, 255, 0.95) 10%, rgba(1,41,63,0.80) 75%, rgba(1,41,63,0.90) 90%); /* FF3.6+ */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsRight.png"),
            radial-gradient(circle at left,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -ms-linear-gradient(90deg, rgba(166, 230, 255, 0.95) 10%, rgba(1,41,63,0.80) 75%, rgba(1,41,63,0.90) 90%); /* IE10 */
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsRight.png"),
            radial-gradient(circle at left,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            -o-linear-gradient(90deg, rgba(166, 230, 255, 0.95) 10%, rgba(1,41,63,0.80) 75%, rgba(1,41,63,0.90) 90%); /* Opera*/
        background-image:
            url("/upload/themes/survey/craig_test_theme/files/starsRight.png"),
            radial-gradient(circle at left,  rgba(241,192,44,1) 0%,rgba(1,1,1,.1) 30%),
            linear-gradient(90deg, rgba(166, 230, 255, 0.95) 10%, rgba(1,41,63,0.80) 75%, rgba(1,41,63,0.90) 90%); /* W3C */
        background-size: 100% 100%;
      }
</style>
<script src="/upload/themes/survey/craig_test_theme/files/vis.js"></script>
<link href="/upload/themes/survey/craig_test_theme/files/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />
<p>Show us what your typical sleep schedule looks like by adjusting the sliders below. You can also drag the timeline as needed (e.g. for shift workers).</p>

<div id="visualization"> </div>

<div id="log"> </div>
<script type="text/javascript">
      var isDebug = false;
      var numSleepItems = 5;
      var numMinutesPerStep = 10;
      var animationDurMillis = 750;

      // current date
      var nowDate = new Date();
      var nowYear = nowDate.getFullYear();
      var nowMonth = nowDate.getMonth() + 1; // zero-indexed
      var nowDay = nowDate.getDate();

      // tomorrow
      var tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate()+1);
      var tomYear = tomorrow.getFullYear();
      var tomMonth = tomorrow.getMonth() + 1; // zero-indexed
      var tomDay = tomorrow.getDate();

      // create a dataset with items
      // we specify the type of the fields `start` and `end` here to be strings
      // containing an ISO date. The fields will be outputted as ISO dates
      // automatically getting data from the DataSet via items.get().
      var items = new vis.DataSet({
        type: { start: 'ISODate', end: 'ISODate' }
      });

      // ISO Dates: today & tomorrow
      var isoToday = nowYear + "-" + addZero(nowMonth) + "-" + addZero(nowDay);
      var isoTomorrow = tomYear + "-" + addZero(tomMonth) + "-" + addZero(tomDay);
      logEvent("isoToday: " + isoToday, isDebug);
      logEvent("isoTomorrow: " + isoTomorrow, isDebug);

      // add items to the DataSet
      var sleepLabels = ["", "Bed Time", "Lights Out", "Fall Asleep", "Wake Up", "Out of Bed"];
      items.add(
      [
        { id: 1, content: sleepLabels[1] + ": 9:30 pm", start: isoToday + "T21:30:00" },
        { id: 2, content: sleepLabels[2] + ": 10:00 pm", start: isoToday + "T22:00:00" },
        { id: 3, content: sleepLabels[3] + ": 10:45 pm", start: isoToday + "T22:45:00" },
        { id: 4, content: sleepLabels[4] + ": 7:00 am",  start: isoTomorrow + "T07:00:00" },
        { id: 5, content: sleepLabels[5] + ": 7:55 am",  start: isoTomorrow + "T07:55:00" },
        { id: 'Day1Am', content: "", start: isoToday + "T00:00:00", end: isoToday + "T12:00:00", type: 'background', className: 'am2' },
        { id: 'Day1Pm', content: "", start: isoToday + "T12:00:01", end: isoToday + "T23:59:59", type: 'background', className: 'pm2' },
        { id: 'Day2Am', content: "", start: isoTomorrow + "T00:00:00", end: isoTomorrow + "T12:00:00", type: 'background', className: 'am2' },
        { id: 'Day2Pm', content: "", start: isoTomorrow + "T12:00:01", end: isoTomorrow + "T23:59:59", type: 'background', className: 'pm2' },
      ]);

      // log changes to the console
      items.on('*', function (event, properties) {
        console.log(event, properties.items);
      });

      // not sure how to programatically init the item labels, so just set them in add method, above
      // items.forEach(function (item) { 
      //     item.content = `${ sleepLabels[item.id] }: ${ new Date(item.start).getHours() }:${ addZero(new Date(item.start).getMinutes()) }`;
      //   });

      var minGlobal = new Date(nowYear, nowMonth-1, nowDay);   // month param expects zero-indexed
      var maxGlobal = new Date(tomYear, tomMonth-1, tomDay+1); // month param expects zero-indexed
      var minGlobalIso = minGlobal.toISOString(); // month param expects zero-indexed
      var maxGlobalIso = maxGlobal.toISOString(); // month param expects zero-indexed

      var options =
      {
        // bounds and size props
        min: minGlobal,
        max: maxGlobal,
        zoomMin: 1000 * 60 * 60 * 12, // half day (millis)
        zoomMax: 1000 * 60 * 60 * 48, // two days (millis)
        timeAxis: { scale: 'minute', step: numMinutesPerStep },
        height: '300px',
        width: '1200px',

        // self-explanatory settings
        multiselect: false,
        horizontalScroll: true,
        zoomKey: 'ctrlKey',
        showMinorLabels: false,
        showMajorLabels: true,

        // enable/disable individual actions:
        editable: { 
          add: false,
          updateTime: true,
          updateGroup: false,
          remove: false,
         },
        showCurrentTime: false,

        // bound items between neighbors, or global min/max
        onMoving: function (item, callback) { 
          // note: vis event times are ISO times, so we must convert min/max
          var leftMin = minGlobalIso;
          var rightMax = maxGlobalIso;

          var prevIdx = item.id - 1;
          var nextIdx = item.id + 1;

          // update neighbor limits
          if (prevIdx > 0) leftMin = items.get(prevIdx).start;
          if (nextIdx <= numSleepItems) rightMax = items.get(nextIdx).start;

          // bound this item between neighbors
          if (item.start < leftMin) { 
            item.start = leftMin;
           }
          if (item.start > rightMax) { 
            item.start = rightMax;
           }
          if (item.end   > rightMax) { 
            item.end   = rightMax;
           }

          //logEvent(item, rightMax, isDebug);
          resetValue(item);

          // update time, and send back the (possibly) changed item
          var newTime = new Date(item.start);
          var newHours = newTime.getHours();
          var newMins = addZero(newTime.getMinutes());
          var amPm = newHours >= 12 ? 'pm' : 'am';

          // 12hr clock
          newHours = newHours%12;
          newHours = newHours ? newHours : 12;
          item.content = sleepLabels[item.id] + ": " + newHours + ":" + newMins + " " + amPm;
          callback(item);
         }
      };


      $(document).ready(function() { 
	      // create timeline obj
	      var container = document.getElementById('visualization');
	      var timeline = new vis.Timeline(container, items, options);
	      
	      // set visibility explicitly
	      //var timelineDiv = container.firstChild;
	      //timelineDiv.style.visibility = "visible";
	      var timelineDiv = container.childNodes;
	      $('.vis-timeline').css("visibility", "visible");
	      
	      // set window, and first selection
	      timeline.setWindow(isoToday + "T13:00:00", isoTomorrow + "T11:00:00", { animation: { duration: animationDurMillis, easingFunction: "easeInOutQuad" } });
	      timeline.setSelection(1);
      });

      // DEBUG: log all events
      // items.on('*', function (event, properties) {
      //   logEvent(event, properties, isDebug);
      // });

      // helper for logging event/props
      function logEvent(event, properties, isDebug) {
        if ( !isDebug ) return;
        var log = document.getElementById('log');
        var msg = document.createElement('div');
        msg.innerHTML = 'event=' + JSON.stringify(event) + ', ' +
            'properties=' + JSON.stringify(properties);
        log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
      }

      // helper for logging event/props
      function logEvent(event, isDebug) { 
        if ( !isDebug ) return;
        var log = document.getElementById('log');
        var msg = document.createElement('div');
        msg.innerHTML = JSON.stringify(event);
        log.firstChild ? log.insertBefore(msg, log.firstChild) : log.appendChild(msg);
       }

      // helper for adding zero to times (e.g. '01' in 12:01)
      function addZero(i) {
        if (i < 10) {
            i = "0" + i;
        }
        return i;
      }

$(document).ready(function() {  
  
  //set Limesurvey value  
  var keys = Object.keys(items._data);
  for(var i=0;i<keys.length;i++){
    var key = keys[i];  
    sleep = items._data[key];
     
    resetValue(sleep);
  }   
});

var fallAsleep = ''; 
 
function resetValue(sleep){    

  if(sleep.id == 1){ //  BedTime 
    $('#answer959247X285X3183').val(getHours(sleep.start));  
    $('#answer959247X285X3183').change();  
    console.log('BedTime ==' + getHours(sleep.start));   
  }else if(sleep.id == 2){ // LightsOutTime (overwritten as VSOL)
    $('#answer959247X285X3184').val(getHours(sleep.start));  
    $('#answer959247X285X3184').change();  
    console.log('LightsOutTime ==' + getHours(sleep.start));  
    howMuchSleep();
  }else if(sleep.id == 3){ // Fall asleep
    fallAsleep = getHours(sleep.start);  
    console.log('Fall asleep ==' + getHours(sleep.start));   
    howMuchSleep();
  }else if(sleep.id == 4){ // WakeTime (overwritten as VTotalSleepTime)
    $('#answer959247X285X3186').val(getHours(sleep.start));  
    $('#answer959247X285X3186').change();  
    console.log('WakeTime ==' + getHours(sleep.start));   
    howMuchSleep();
  }else if(sleep.id == 5){  // Out of bed
    $('#answer959247X285X3187').val(getHours(sleep.start));
    $('#answer959247X285X3187').change();  
    console.log('Out of bed ==' + getHours(sleep.start));   
  }
}

function getHours (start){   
  var newTime = new Date(start);
  var itemHours = newTime.getHours();
  var itemMins = addZero(newTime.getMinutes());
  return itemHours + ':' + itemMins; 
}

            
function howMuchSleep (){  
  calSOL();
  calTotalSleepTime();
}

function calSOL(){   
  var timeLightsOut = $('#answer959247X285X3184').val().split(':'); 
  var timeLightsOutMin = (timeLightsOut[0] * 60) + parseInt(timeLightsOut[1]);
  var timeFellAsleep = fallAsleep.split(':'); 
  var timeFellAsleepMin = (timeFellAsleep[0] * 60) + parseInt(timeFellAsleep[1]); 
   
  if(timeLightsOutMin > timeFellAsleepMin){ // between midnight 
    timeFellAsleepMin = timeFellAsleepMin + (24 * 60);
  } 

  timeFellAsleepMin = timeFellAsleepMin - timeLightsOutMin; 
  
  // Set to [V]SOL
  $('#answer959247X285X3188').val(Math.floor(timeFellAsleepMin / 60) + ':' + ('0' + (timeFellAsleepMin % 60)).slice(-2)); 
  $('#answer959247X285X3188').change();  
}

function calTotalSleepTime (){    
  var timeDidWake = $('#answer959247X285X3186').val().split(':'); 
  var timeDidWakeMin = (timeDidWake[0] * 60) + parseInt(timeDidWake[1]);
  var timeFellAsleep = fallAsleep.split(':'); 
  var timeFellAsleepMin = (timeFellAsleep[0] * 60) + parseInt(timeFellAsleep[1]);
  
  if(timeFellAsleepMin > timeDidWakeMin){ // between midnight 
    timeDidWakeMin = timeDidWakeMin + (24 * 60);
  }
  timeDidWakeMin = timeDidWakeMin - timeFellAsleepMin; 

  // Set to [V]TotalSleepTime
  $('#answer959247X285X3189').val(Math.floor(timeDidWakeMin / 60) + ':' + ('0' + (timeDidWakeMin % 60)).slice(-2)); 
  $('#answer959247X285X3189').change();  
} 
    </script>